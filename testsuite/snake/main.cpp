//
// Created by vformato on 9/16/25.
//

#include "HW/CPU.h"
#include "SDL/Buffer.h"
#include "SDL/Init.h"
#include "SDL/WindowHandle.h"

int main() {
  constexpr std::array<uint8_t, 309> program = {
      0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85, 0x02, 0xa9, 0x04,
      0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85, 0x11, 0x85,
      0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe, 0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20,
      0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38,
      0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22,
      0x60, 0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0, 0x1b, 0xa9,
      0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02, 0x60, 0xa9, 0x02, 0x24, 0x02,
      0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06, 0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10,
      0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5,
      0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa,
      0x06, 0x4c, 0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02, 0x4a,
      0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9, 0x20, 0x85, 0x10, 0x90,
      0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6, 0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f,
      0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c,
      0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe,
      0x91, 0x00, 0x60, 0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
      0xea, 0xca, 0xd0, 0xfb, 0x60};

  auto clock = std::chrono::high_resolution_clock{};
  auto frame_duration = std::chrono::duration<double>(1.0f / 60.0f);

  // Initialize SDL
  if (auto result = BNES::SDL::Init(); !result) {
    spdlog::error("Unable to initialize program!");
    return 1;
  }

  auto window_handle = BNES::SDL::MakeWindow(320, 320).value();
  auto screen_surface = window_handle.Surface();

  auto buffer = BNES::SDL::MakeBuffer(32, 32).value();
  auto maybe_texture = window_handle.CreateTexture(std::move(buffer));
  if (!maybe_texture) {
    spdlog::error("Unable to create texture: {}", maybe_texture.error().Message());
    return 1;
  }
  auto &texture = maybe_texture.value();

  // The quit flag
  bool quit{false};

  // The event data
  SDL_Event e;
  SDL_zero(e);

  BNES::HW::CPU cpu;
  cpu.LoadProgram(program);

  // The main loop
  while (quit == false) {
    auto begin = clock.now();

    // Get event data
    while (SDL_PollEvent(&e) == true) {
      // If event is quit type
      if (e.type == SDL_EVENT_QUIT) {
        // End the main loop
        quit = true;
      }
    }

    // texture.Buffer().WritePixel(x, y, BNES::SDL::Pixel{255, 0, 0, 255}); // Write a red pixel
    // ++x;
    // if (x >= texture.Buffer().Width()) {
    //   x = 0;
    //   ++y;
    // }
    // texture.Update();

    // Set a blue background to distinguish from black texture
    SDL_SetRenderDrawColor(window_handle.Renderer(), 0, 0, 255, 255);
    SDL_RenderClear(window_handle.Renderer());

    texture.Render(window_handle.Renderer());

    SDL_RenderPresent(window_handle.Renderer());

    // lock 60 fps for now
    std::this_thread::sleep_for(frame_duration - (clock.now() - begin));
  }

  // Clean up
  BNES::SDL::Quit();

  return 0;
}
